<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument

		java.util.List
		java.util.Map
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();

String projectName = codeGenArgument.getCurrentProjectName();
String processName = node.getProcess().getName();

String methodTemp = ElementParameterParser.getValue(node, "__METHOD__");
String method = methodTemp.indexOf("(") != -1 ? methodTemp.substring(0, methodTemp.indexOf("(")) : methodTemp;

Boolean useAuth = Boolean.valueOf(ElementParameterParser.getValue(node, "__NEED_AUTH__"));
String authType = ElementParameterParser.getValue(node, "__AUTH_TYPE__");
String username = ElementParameterParser.getValue(node, "__AUTH_USERNAME__");
String password = ElementParameterParser.getValue(node, "__AUTH_PASSWORD__");

IConnection inputConn = null;
List<? extends IConnection> incomingConnections = node.getIncomingConnections();
if (incomingConnections != null && !incomingConnections.isEmpty()) {
	for (IConnection conn : incomingConnections) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			inputConn = conn;
			break;
		}
	}
}
if (inputConn != null) {
	List<? extends IConnection> conns = node.getOutgoingSortedConnections();
	if (conns != null && conns.size() > 0) {
		for (int i = 0; i < conns.size(); i++) {
			IConnection conn = conns.get(i);
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	%>
		<%=conn.getName()%> = null;
	<%
			}
		}
	}

	List<? extends IConnection> connsResponse = node.getOutgoingConnections("RESPONSE");
	List<? extends IConnection> connsFault = node.getOutgoingConnections("FAULT");
	IConnection connResponse = null;
	IConnection connFault = null;
	if (connsResponse.size() == 1) {
		connResponse = connsResponse.get(0);
	}
	if (connsFault.size() == 1) {
		connFault = connsFault.get(0);
	}
%>
	try {
		Document requestTalendDoc_<%=cid%> = <%=inputConn.getName()%>.payload;

		try {
			org.dom4j.Document responseDoc_<%=cid%> = null;

			if (null == this.registry) {
				responseDoc_<%=cid%> = serviceInvokerHelper_<%=cid%>.invoke(
						serviceName_<%=cid%>, portName_<%=cid%>, "<%=method%>",
						requestTalendDoc_<%=cid%>.getDocument(), <%=ElementParameterParser.getValue(node, "__ESB_ENDPOINT__")%>);
			} else {
			    if (null == consumer_<%=cid%>) {
                    <%
                    Boolean useSl = Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_LOCATOR__"));
                    if (useSl) {
                        %>
                        final java.util.Map<String, String> slCustomProps_<%=cid%> = new java.util.HashMap<String, String>();
                        <%
                        List<Map<String, String>> customProperties = (List<Map<String,String>>)
                                ElementParameterParser.getObjectValue(node, "__SERVICE_LOCATOR_CUSTOM_PROPERTIES__");
                        for (int k = 0; k < customProperties.size(); k++) { %>
                            slCustomProps_<%=cid%>.put(<%=customProperties.get(k).get("PROP_NAME")%>, <%=customProperties.get(k).get("PROP_VALUE")%>);
                        <% }
                    } %>

                    consumer_<%=cid%> = this.registry.createConsumer(
                        new ESBEndpointInfo() {

                            @SuppressWarnings("serial")
                            private java.util.Map<String, Object> props = new java.util.HashMap<String, Object>() {{
                                put("dataFormat", "PAYLOAD");
                                put("portName", portName_<%=cid%>.toString());
                                put("serviceName", serviceName_<%=cid%>.toString());
                                put("defaultOperationName", "<%=method%>");
                                put("defaultOperationNameSpace", "");
                                put("soapAction", "<%=ElementParameterParser.getValue(node, "__SOAP_ACTION__")%>");
                                put("publishedEndpointUrl", <%=ElementParameterParser.getValue(node, "__ESB_ENDPOINT__")%>);
                                put("COMMUNICATION_STYLE", "<%=ElementParameterParser.getValue(node, "__COMMUNICATION_STYLE__")%>");

                                // use Service Locator
                                put("useServiceLocator", <%=useSl%>);
                                <% if (useSl) { %>
                                    put("LocatorSelectionStrategy", "<%=ElementParameterParser.getValue(node, "__SERVICE_LOCATOR_STRATEGY__")%>");
                                    put("SL-PROPS", slCustomProps_<%=cid%>);
                                <% } %>
                                // use Service Activity Monitor
                                put("useServiceActivityMonitor", <%=Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_ACTIVITY_MONITOR__"))%>);

                                <% if (useAuth) { %>
                                    put("esbSecurity", "<%=authType%>");
                                    put("username", <%=username%>);
                                    put("password", <%=password%>);
                                <% } %>
                            }};

                            public String getEndpointUri() {
                                // projectName + "_" + processName + "_" + componentName
                                return "<%=projectName%>_<%=processName%>_<%=cid%>";
                            }

                            public java.util.Map<String, Object> getEndpointProperties() {
                                return props;
                            }

                            public String getEndpointKey() {
                                return "cxf";
                            }
                        }
                    );
			    }
				java.util.Map<String, String> customProps_<%=cid%> = null;
				<% if (Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_ACTIVITY_MONITOR__"))) {
					List<Map<String, String>> customProperties = (List<Map<String,String>>)
							ElementParameterParser.getObjectValue(node, "__SERVICE_ACTIVITY_CUSTOM_PROPERTIES__");
					if (!customProperties.isEmpty()) { %>
						customProps_<%=cid%> = new java.util.HashMap<String, String>();
						<% for (int k = 0; k < customProperties.size(); k++) { %>
						customProps_<%=cid%>.put(<%=customProperties.get(k).get("PROP_NAME")%>, <%=customProperties.get(k).get("PROP_VALUE")%>);
						<% } %>
					<% } %>
				<% } %>
				Object request_<%=cid%> = wrapPayload(requestTalendDoc_<%=cid%>.getDocument(), customProps_<%=cid%>);
				responseDoc_<%=cid%> = (org.dom4j.Document) consumer_<%=cid%>.invoke(request_<%=cid%>);
			}
			<% if (null != connResponse) {
				String connResponseName = connResponse.getName(); %>
				if (<%=connResponseName%> == null) {
					<%=connResponseName%> = new <%=connResponseName%>Struct();
				}
				Document responseTalendDoc_<%=cid%> = null;
				if (null != responseDoc_<%=cid%>) {
					responseTalendDoc_<%=cid%> = new Document();
					responseTalendDoc_<%=cid%>.setDocument(responseDoc_<%=cid%>);
				}
				<%=connResponseName%>.payload = responseTalendDoc_<%=cid%>;
			<% } %>
		} catch (javax.xml.ws.soap.SOAPFaultException e) {
			<% if (null != connFault) {
				String connFaultName = connFault.getName(); %>
				javax.xml.soap.SOAPFault soapFault_<%=cid%> = e.getFault();
				org.dom4j.Document faultDoc_<%=cid%> = null;
				if (null != soapFault_<%=cid%>.getDetail() && null != soapFault_<%=cid%>.getDetail().getFirstChild()) {
					try {
						javax.xml.transform.Source faultSource_<%=cid%> =
							new javax.xml.transform.dom.DOMSource(soapFault_<%=cid%>.getDetail().getFirstChild());

						org.dom4j.io.DocumentResult result_<%=cid%> = new org.dom4j.io.DocumentResult();
						javax.xml.transform.TransformerFactory.newInstance()
							.newTransformer().transform(faultSource_<%=cid%>, result_<%=cid%>);
						faultDoc_<%=cid%> = result_<%=cid%>.getDocument();
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				if (<%=connFaultName%> == null) {
					<%=connFaultName%> = new <%=connFaultName%>Struct();
				}
				<%=connFaultName%>.faultCode = soapFault_<%=cid%>.getFaultCodeAsQName().toString();
				<%=connFaultName%>.faultString = soapFault_<%=cid%>.getFaultString();
				<%=connFaultName%>.faultActor = soapFault_<%=cid%>.getFaultActor();

				<%=connFaultName%>.faultNode = null;
				<%=connFaultName%>.faultRole = null;
				if (javax.xml.soap.SOAPConstants.URI_NS_SOAP_1_2_ENVELOPE.equals(soapFault_<%=cid%>.getNamespaceURI())) {
					// SOAP 1.2
					try {
						<%=connFaultName%>.faultNode = soapFault_<%=cid%>.getFaultNode();
						<%=connFaultName%>.faultRole = soapFault_<%=cid%>.getFaultRole();
					} catch (java.lang.UnsupportedOperationException uoe) { }
				}

				Document faultTalendDoc_<%=cid%> = null;
				if (null != faultDoc_<%=cid%>) {
					faultTalendDoc_<%=cid%> = new Document();
					faultTalendDoc_<%=cid%>.setDocument(faultDoc_<%=cid%>);
				}
				<%=connFaultName%>.faultDetail = faultTalendDoc_<%=cid%>;
			<% } else { %>
				e.printStackTrace();
			<% } %>
		}
	} catch(Exception e){
		<% if (("true").equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"))) { %>
			throw(e);
		<% } else { %>
			System.err.print(e.getMessage());
		<% } %>
	}

<% } %>
