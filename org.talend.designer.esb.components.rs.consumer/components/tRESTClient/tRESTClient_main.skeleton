import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.talend.core.model.process.IConnection;
import org.talend.core.model.process.IConnectionCategory;
import org.talend.core.model.process.INode;
import org.talend.designer.codegen.config.CodeGeneratorArgument;
import org.talend.designer.codegen.config.NodeConnectionsHelper;
import org.talend.designer.codegen.config.NodeParamsHelper;

public class CLASS
{
	private INode node;
	private IConnection inputConn;
	private IConnection connResponse;
	private IConnection connFault;
	private List<IConnection> dataOutputs;
	private NodeParamsHelper paramsHelper;

	//code generation options:
	String cid;
	String method;
	String acceptType;
	String contentType;
	boolean useAuth;
	boolean useAuthorization;
	String authType; 
	boolean isSLEnable;
	boolean isSAMEnable;
	boolean isStudioEEVersion;
	boolean useBusinessCorrelation;

	private void clearCache() {
		node = null;
		inputConn = null;
		connFault = null;
		connResponse = null;
		dataOutputs = null;
		paramsHelper = null;
	}

	public void initOptions(INode node) {
		clearCache();
		setNode(node);
		initConnections();
		initProps();
	}

	public void setNode(INode node) {
		this.node = node;
		paramsHelper = new NodeParamsHelper(node);
	}

	private void initConnections() {
		NodeConnectionsHelper connections = new NodeConnectionsHelper(node);
		inputConn = connections.getInputConn();
		connResponse = connections.getOutputConnResponse();
		connFault = connections.getOutputConnFault();
		dataOutputs = connections.getDataOutputs();
	}

	private void initProps() {
		cid = node.getUniqueName();

		method = getStringParam("__METHOD__");
		acceptType = getStringParam("__ACCEPT_TYPE__");
		if(acceptType == null) {
			acceptType = "application/xml";
		}
		contentType = getStringParam("__CONTENT_TYPE__");
		if(contentType == null) {
			contentType = "application/xml";
		}
		useAuth = getBoolParam("__NEED_AUTH__");
		useAuthorization = getVisibleBoolParam("__NEED_AUTHORIZATION__");
		authType = getStringParam("__AUTH_TYPE__");
		isSLEnable = getBoolParam("__SERVICE_LOCATOR__");
		isSAMEnable = getBoolParam("__SERVICE_ACTIVITY_MONITOR__");
		useBusinessCorrelation = getBoolParam("__USE_BUSINESS_CORRELATION__");
	}

	private List<Entry<String, String>> getSLProperties(){
		return getPropertiesPram("__SERVICE_LOCATOR_CUSTOM_PROPERTIES__");
	}

	private List<Entry<String, String>> getSAMProperties(){
		return getPropertiesPram("__SERVICE_ACTIVITY_MONITOR_CUSTOM_PROPERTIES__");
	}

	private <T> T getObjectParam(String key) {
		return paramsHelper.getObjectParam(key);
	}

	private String getStringParam(String key) {
		return paramsHelper.getStringParam(key);
	}

	private String getVisibleStringParam(String key) {
		return paramsHelper.getVisibleStringParam(key);
	}

	private boolean getBoolParam(String key) {
		return paramsHelper.getBoolParam(key);
	}

	private boolean getVisibleBoolParam(String key) {
		return paramsHelper.getVisibleBoolParam(key);
	}

	private List<Entry<String, String>> getPropertiesPram(String key){
		return paramsHelper.getPropertiesPram(key);
	}

	public String generate(CodeGeneratorArgument argument)
	{
		//initOptions(..)
		return "";
	}
}