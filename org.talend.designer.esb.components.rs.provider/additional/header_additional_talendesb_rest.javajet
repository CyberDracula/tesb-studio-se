<%@ jet
	package="org.talend.designer.codegen.translators.common"
	imports="
		java.util.ArrayList
		java.util.Arrays
		java.util.Collections
		java.util.HashMap
		java.util.HashSet
		java.util.List
		java.util.Map
		java.util.Set
		java.util.Vector

		java.util.regex.Matcher
		java.util.regex.Pattern

		org.talend.designer.codegen.config.CodeGeneratorArgument

		org.talend.core.model.process.INode
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.process.ElementParameterParser

		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType

		java.io.UnsupportedEncodingException
		java.net.URLEncoder
	"
	class="Header_additional"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
Vector v = (Vector) codeGenArgument.getArgument();
IProcess process = (IProcess) v.get(0);

List<? extends INode> httpRequestComponentsList = process.getNodesOfType("tRESTRequestLoop");
if (!httpRequestComponentsList.isEmpty()) {

	final class URITemplateUtils {

		public static final String TEMPLATE_PARAMETERS = "jaxrs.template.parameters";
		public static final String LIMITED_REGEX_SUFFIX = "(/.*)?";
		public static final String FINAL_MATCH_GROUP = "FINAL_MATCH_GROUP";
		private static final String DEFAULT_PATH_VARIABLE_REGEX = "([^/]+?)";
		private static final String CHARACTERS_TO_ESCAPE = ".*+";

		private final String template;
		private final List<String> variables = new ArrayList<String>();
		private final List<String> customVariables = new ArrayList<String>();
		private final Pattern templateRegexPattern;
		private final String literals;
		private final List<UriChunk> uriChunks;

		public URITemplateUtils(String theTemplate) {
			template = theTemplate;
			StringBuilder literalChars = new StringBuilder();
			StringBuilder patternBuilder = new StringBuilder();
			CurlyBraceTokenizer tok = new CurlyBraceTokenizer(template);
			uriChunks = new ArrayList<UriChunk>();
			while (tok.hasNext()) {
				String templatePart = tok.next();
				UriChunk chunk = createUriChunk(templatePart);
				uriChunks.add(chunk);
				if (chunk instanceof Literal) {
					String encodedValue = encodePartiallyEncoded(chunk.getValue(), false);
					String substr = escapeCharacters(encodedValue);
					literalChars.append(substr);
					patternBuilder.append(substr);
				} else if (chunk instanceof Variable) {
					Variable var = (Variable)chunk;
					variables.add(var.getName());
					if (var.getPattern() != null) {
						customVariables.add(var.getName());
						patternBuilder.append('(');
						patternBuilder.append(var.getPattern());
						patternBuilder.append(')');
					} else {
						patternBuilder.append(DEFAULT_PATH_VARIABLE_REGEX);
					}
				}
			}
			literals = literalChars.toString();

			int endPos = patternBuilder.length() - 1;
			boolean endsWithSlash = (endPos >= 0) ? patternBuilder.charAt(endPos) == '/' : false;
			if (endsWithSlash) {
				patternBuilder.deleteCharAt(endPos);
			}
			patternBuilder.append(LIMITED_REGEX_SUFFIX);

			templateRegexPattern = Pattern.compile(patternBuilder.toString());
		}



		public String getLiteralChars() {
			return literals;
		}

		public String getValue() {
			return template;
		}

		/**
		 * List of all variables in order of appearance in template.
		 *
		 * @return unmodifiable list of variable names w/o patterns,
		 * e.g. for "/foo/{v1:\\d}/{v2}" returned list is ["v1","v2"].
		 */
		public List<String> getVariables() {
			return Collections.unmodifiableList(variables);
		}

		/**
		 * List of variables with patterns (regexps). List is subset of elements from {@link #getVariables()}.
		 *
		 * @return unmodifiable list of variables names w/o patterns.
		 */
		public List<String> getCustomVariables() {
			return Collections.unmodifiableList(customVariables);
		}

		private String escapeCharacters(String expression) {

			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < expression.length(); i++) {
				char ch = expression.charAt(i);
				sb.append(isReservedCharacter(ch) ? "\\" + ch : ch);
			}
			return sb.toString();
		}

		private boolean isReservedCharacter(char ch) {
			return CHARACTERS_TO_ESCAPE.indexOf(ch) != -1;
		}




		/**
		 * Creates object form string.
		 *
		 * @param uriChunk stringified uri chunk
		 * @return If param has variable form then {@link Variable} instance is created,
		 * otherwise chunk is treated as {@link Literal}.
		 */
		public UriChunk createUriChunk(String uriChunk) {
			if (uriChunk == null || "".equals(uriChunk)) {
				throw new IllegalArgumentException("uriChunk is empty");
			}
			UriChunk uriChunkRepresentation = new Variable().create(uriChunk);
			if (uriChunkRepresentation == null) {
				uriChunkRepresentation = new Literal().create(uriChunk);
			}
			return uriChunkRepresentation;
		}

		/**
		 * Stringified part of URI. Chunk is not URI segment; chunk can span over multiple URI segments or one URI
		 * segments can have multiple chunks. Chunk is used to decompose URI of {@link URITemplate} into literals
		 * and variables. Example: "foo/bar/{baz}{blah}" is decomposed into chunks: "foo/bar", "{baz}" and
		 * "{blah}".
		 */
		abstract class UriChunk {

			public abstract String getValue();

			@Override
			public String toString() {
				return getValue();
			}
		}

		final class Literal extends UriChunk {
			private String value;

			private Literal() {
				// empty constructor
			}

			public Literal create(String uriChunk) {
				if (uriChunk == null || "".equals(uriChunk)) {
					throw new IllegalArgumentException("uriChunk is empty");
				}
				Literal literal = new Literal();
				literal.value = uriChunk;
				return literal;
			}

			@Override
			public String getValue() {
				return value;
			}

		}

		/**
		 * Variable of URITemplate. Variable has either "{varname:pattern}" syntax or "{varname}".
		 */
		final class Variable extends UriChunk {
			private final Pattern VARIABLE_PATTERN =
					Pattern.compile("(\\w[-\\w\\.]*[ ]*)(\\:(.+))?");
			private String name;
			private Pattern pattern;

			private Variable() {
				// empty constructor
			}

			/**
			 * Creates variable from stringified part of URI.
			 *
			 * @param uriChunk uriChunk chunk that depicts variable
			 * @return Variable if variable was successfully created; null if uriChunk was not a variable
			 */
			public Variable create(String uriChunk) {
				Variable newVariable = new Variable();
				if (uriChunk == null || "".equals(uriChunk)) {
					return null;
				}
				if (insideBraces(uriChunk)) {
					uriChunk = stripBraces(uriChunk).trim();
					Matcher matcher = VARIABLE_PATTERN.matcher(uriChunk);
					if (matcher.matches()) {
						newVariable.name = matcher.group(1).trim();
						if (matcher.group(2) != null && matcher.group(3) != null) {
							String patternExpression = matcher.group(3).trim();
							newVariable.pattern = Pattern.compile(patternExpression);
						}
						return newVariable;
					}
				}
				return null;
			}

			public String getName() {
				return name;
			}

			public String getPattern() {
				return pattern != null ? pattern.pattern() : null;
			}

			@Override
			public String getValue() {
				if (pattern != null) {
					return "{" + name + ":" + pattern + "}";
				} else {
					return "{" + name + "}";
				}
			}
		}

		/**
		 * Splits string into parts inside and outside curly braces. Nested curly braces are ignored and treated
		 * as part inside top-level curly braces. Example: string "foo{bar{baz}}blah" is split into three tokens,
		 * "foo","{bar{baz}}" and "blah". When closed bracket is missing, whole unclosed part is returned as one
		 * token, e.g.: "foo{bar" is split into "foo" and "{bar". When opening bracket is missing, closing
		 * bracket is ignored and taken as part of current token e.g.: "foo{bar}baz}blah" is split into "foo",
		 * "{bar}" and "baz}blah".
		 * <p>
		 * This is helper class for {@link URITemplate} that enables recurring literals appearing next to regular
		 * expressions e.g. "/foo/{zipcode:[0-9]{5}}/". Nested expressions with closed sections, like open-closed
		 * brackets causes expression to be out of regular grammar (is context-free grammar) which are not
		 * supported by Java regexp version.
		 */
		class CurlyBraceTokenizer {

			private List<String> tokens = new ArrayList<String>();
			private int tokenIdx;

			public CurlyBraceTokenizer(String string) {
				boolean outside = true;
				int level = 0;
				int lastIdx = 0;
				int idx;
				for (idx = 0; idx < string.length(); idx++) {
					if (string.charAt(idx) == '{') {
						if (outside) {
							if (lastIdx < idx) {
								tokens.add(string.substring(lastIdx, idx));
							}
							lastIdx = idx;
							outside = false;
						} else {
							level++;
						}
					} else if (string.charAt(idx) == '}' && !outside) {
						if (level > 0) {
							level--;
						} else {
							if (lastIdx < idx) {
								tokens.add(string.substring(lastIdx, idx + 1));
							}
							lastIdx = idx + 1;
							outside = true;
						}
					}
				}
				if (lastIdx < idx) {
					tokens.add(string.substring(lastIdx, idx));
				}
			}

			public boolean hasNext() {
				return tokens.size() > tokenIdx;
			}

			public String next() {
				if (hasNext()) {
					return tokens.get(tokenIdx++);
				} else {
					throw new IllegalStateException("no more elements");
				}
			}
		}

		/**
		 * Token is enclosed by curly braces.
		 *
		 * @param token text to verify
		 * @return true if enclosed, false otherwise.
		 */
		public boolean insideBraces(String token) {
			return token.charAt(0) == '{' && token.charAt(token.length() - 1) == '}';
		}

		/**
		 * Strips token from enclosed curly braces. If token is not enclosed method
		 * has no side effect.
		 *
		 * @param token text to verify
		 * @return text stripped from curly brace begin-end pair.
		 */
		public String stripBraces(String token) {
			if (insideBraces(token)) {
				return token.substring(1, token.length() - 1);
			} else {
				return token;
			}
		}




		// HttpUtils()

		private final Pattern ENCODE_PATTERN =
				Pattern.compile("%[0-9a-fA-F][0-9a-fA-F]");

		// there are more of such characters, ex, '*' but '*' is not affected by UrlEncode
		private static final String PATH_RESERVED_CHARACTERS = "=@/:";
		private static final String QUERY_RESERVED_CHARACTERS = "?/";

		private String componentEncode(String reservedChars, String value) {

			StringBuilder buffer = new StringBuilder();
			StringBuilder bufferToEncode = new StringBuilder();

			for (int i = 0; i < value.length(); i++) {
				char currentChar = value.charAt(i);
				if (reservedChars.indexOf(currentChar) != -1) {
					if (bufferToEncode.length() > 0) {
						buffer.append(urlEncode(bufferToEncode.toString()));
						bufferToEncode.setLength(0);
					}
					buffer.append(currentChar);
				} else {
					bufferToEncode.append(currentChar);
				}
			}

			if (bufferToEncode.length() > 0) {
				buffer.append(urlEncode(bufferToEncode.toString()));
			}

			return buffer.toString();
		}

		public String queryEncode(String value) {

			return componentEncode(QUERY_RESERVED_CHARACTERS, value);
		}

		public String urlEncode(String value) {

			try {
				value = java.net.URLEncoder.encode(value, "UTF-8");
			} catch (java.io.UnsupportedEncodingException ex) {
				// unlikely to happen
			}

			return value;
		}

		public String pathEncode(String value) {

			String result = componentEncode(PATH_RESERVED_CHARACTERS, value);
			// URLEncoder will encode '+' to %2B but will turn ' ' into '+'
			// We need to retain '+' and encode ' ' as %20
			if (result.indexOf('+') != -1) {
				result = result.replace("+", "%20");
			}
			if (result.indexOf("%2B") != -1) {
				result = result.replace("%2B", "+");
			}

			return result;
		}

		public boolean isPartiallyEncoded(String value) {
			return ENCODE_PATTERN.matcher(value).find();
		}

		/**
		 * Encodes partially encoded string. Encode all values but those matching pattern
		 * "percent char followed by two hexadecimal digits".
		 *
		 * @param encoded fully or partially encoded string.
		 * @return fully encoded string
		 */
		public String encodePartiallyEncoded(String encoded, boolean query) {
			if (encoded.length() == 0) {
				return encoded;
			}
			Matcher m = ENCODE_PATTERN.matcher(encoded);
			StringBuilder sb = new StringBuilder();
			int i = 0;
			while (m.find()) {
				String before = encoded.substring(i, m.start());
				sb.append(query ? queryEncode(before) : pathEncode(before));
				sb.append(m.group());
				i = m.end();
			}
			String tail = encoded.substring(i, encoded.length());
			sb.append(query ? queryEncode(tail) : pathEncode(tail));
			return sb.toString();
		}

	}

	INode tRESTRequestNode = httpRequestComponentsList.get(0);
	String cid = tRESTRequestNode.getUniqueName();
	cid = cid.replaceAll("_Loop", "");
%>

/**
 * A special Dom4J provider implementation to help conversion in JAX-RS
 * @see http://jira.talendforge.org/browse/TESB-3329
 */
@javax.ws.rs.Produces({"application/xml", "application/json"})
@javax.ws.rs.Consumes({"application/xml", "application/json"})
public static class DOM4JProvider implements javax.ws.rs.ext.MessageBodyReader<org.dom4j.Document>,
		javax.ws.rs.ext.MessageBodyWriter<org.dom4j.Document> {

	private static final Class<org.w3c.dom.Document> DOM_DOC_CLS = org.w3c.dom.Document.class;

	private javax.ws.rs.ext.Providers providers;

	@javax.ws.rs.core.Context
	public void setProviders(javax.ws.rs.ext.Providers providers) {
		this.providers = providers;
	}

	public boolean isReadable(Class<?> cls, java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
			javax.ws.rs.core.MediaType mt) {
		return org.dom4j.Document.class.isAssignableFrom(cls);
	}

	public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls, java.lang.reflect.Type type,
			java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
			javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
			throws IOException, javax.ws.rs.WebApplicationException {
		javax.ws.rs.ext.MessageBodyReader<org.w3c.dom.Document> reader =
				providers.getMessageBodyReader(DOM_DOC_CLS, DOM_DOC_CLS, anns, mt);
		if (reader == null) {
			throw new javax.ws.rs.WebApplicationException(415);
		}
		org.w3c.dom.Document domDoc =
				reader.readFrom(DOM_DOC_CLS, DOM_DOC_CLS, anns, mt, headers, is);
		return new org.dom4j.io.DOMReader().read(domDoc);
	}

	public long getSize(org.dom4j.Document doc, Class<?> cls, java.lang.reflect.Type type,
			java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt) {
		return -1;
	}

	public boolean isWriteable(Class<?> cls, java.lang.reflect.Type type,
			java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt) {
		return org.dom4j.Document.class.isAssignableFrom(cls);
	}

	public void writeTo(org.dom4j.Document doc,Class<?> cls, java.lang.reflect.Type type,
			java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
			javax.ws.rs.core.MultivaluedMap<String, Object> headers, java.io.OutputStream os)
			throws IOException, javax.ws.rs.WebApplicationException {
		if (mt.getSubtype().contains("xml")) {
			org.dom4j.io.XMLWriter writer = new org.dom4j.io.XMLWriter(os);
			writer.write(doc);
			writer.flush();
		} else {
			org.w3c.dom.Document domDoc = convertToDOM(doc);

			javax.ws.rs.ext.MessageBodyWriter<org.w3c.dom.Document> writer =
					providers.getMessageBodyWriter(DOM_DOC_CLS, DOM_DOC_CLS, anns, mt);
			if (writer == null) {
				throw new javax.ws.rs.WebApplicationException(406);
			}
			writer.writeTo(domDoc, DOM_DOC_CLS, DOM_DOC_CLS, anns, mt, headers, os);
		}
	}

	private org.w3c.dom.Document convertToDOM(org.dom4j.Document doc) {
		String xml = doc.asXML();
		try {
			return org.apache.cxf.helpers.DOMUtils.readXml(new java.io.StringReader(xml));
		} catch (Exception ex) {
			throw new javax.ws.rs.WebApplicationException(ex);
		}
	}
}


private boolean runInTalendEsbRuntimeContainer = false;

public void setRunInTalendEsbRuntimeContainer(boolean flag) {
	runInTalendEsbRuntimeContainer = flag;
}

private boolean restTalendJobAlreadyStarted = false;

/**
 * REST provider implementation
 */
@javax.ws.rs.Path("/")
@javax.ws.rs.Produces({"application/xml", "application/json"})
@javax.ws.rs.Consumes({"application/xml", "application/json"})
public static class RestServiceProviderImpl4TalendJob {

	@javax.ws.rs.core.Context private javax.ws.rs.core.UriInfo ui;

	private final <%=process.getName()%> job;

	public RestServiceProviderImpl4TalendJob(<%=process.getName()%> job) {
		this.job = job;
	}

	private javax.ws.rs.core.Response processRequest(java.util.Map<String, Object> request) {
		try {
			java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
			globalMap.put("restRequest", request);
			globalMap.put(KEY_DB_DATASOURCES, job.globalMap.get(KEY_DB_DATASOURCES));

			job.tRESTRequest_1_LoopProcess(globalMap);

			java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap.get("restResponse");

			Object responseBody = null;
			Integer status = null;
			if (null != response) {
				responseBody = response.get("BODY");
				status = (Integer) response.get("STATUS");
			}
			if (null == status) {
				status = (request.containsKey("STATUS")) ? (Integer) request.get("STATUS") : 404;
			}
			return javax.ws.rs.core.Response.status(status).entity(responseBody).build();
		} catch (Throwable ex) {
			ex.printStackTrace();
			throw new javax.ws.rs.WebApplicationException(ex, 500);
		}
	}

<%
	// TalendString helper
	final class TalendString {
		private final String name;

		public TalendString(String name) {
			this.name = name;
		}

		// copy-paste from routines.TalendString
		public String getAsciiRandomString(int length) {
			java.util.Random random = new java.util.Random();
			int cnt = 0;
			StringBuffer buffer = new StringBuffer();
			char ch;
			int end = 'z' + 1;
			int start = ' ';
			while (cnt < length) {
				ch = (char) (random.nextInt(end - start) + start);
				if (Character.isLetterOrDigit(ch)) {
					buffer.append(ch);
					cnt++;
				}
			}
			return name + "_" + buffer.toString();
		}
	}

	/**
	* JAXRS Parameter Representation
	*/
	final class Parameter {
		private final String name;
		private final String javaType;
		private final String paramType;
		private final String defaultValue;
		private final String variableName;

		public Parameter(String name, String paramType, String javaType, String defaultValue) {
			this(name, paramType, javaType, defaultValue, false);
		}

		public Parameter(String name, String paramType, String javaType, String defaultValue, boolean generateVariableName) {
			this.name = name;
			this.javaType = javaType;
			this.paramType = paramType;
			this.defaultValue = defaultValue;
			this.variableName = (generateVariableName) ? new TalendString(name).getAsciiRandomString(5) : name;
		}

		public String getName() {
			return name;
		}
		public String getJavaType() {
			return javaType;
		}
		public String getParamType() {
			return paramType;
		}
		public String getDefaultValue() {
			return defaultValue;
		}
		public String getVariableName() {
			return variableName;
		}
	}

List<? extends IConnection> conns = process.getNodesOfType("tRESTRequestIn").get(0).getOutgoingSortedConnections();
if (null != conns && !conns.isEmpty()) {
	List<Map<String, String>> mappings = (List<Map<String, String>>) ElementParameterParser.getObjectValue(tRESTRequestNode, "__SCHEMAS__");
	for (IConnection conn : conns) {
		if (!conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			continue;
		}

		String connName = conn.getName();
		String httpVerb = null;
		String uriPattern = null;

		boolean foundMapping = false;
		for (Map<String, String> mapping : mappings) {
			String outputConn = mapping.get("SCHEMA");
			if (connName.equals(outputConn)) {
				foundMapping = true;
				httpVerb = mapping.get("HTTP_VERB");
				uriPattern = mapping.get("URI_PATTERN");
			}
		}
		if (!foundMapping) {
			continue;
		}

		boolean formSupported = false;

		// All the parameters specified in the Schema Editor need to be handled.
		final Set<String> restParameterTypes = new HashSet<String>(Arrays.asList("PATH", "QUERY", "FORM", "HEADER"));

		final Set<JavaType> supportedJavaTypes = new HashSet<JavaType>(Arrays.asList(
				JavaTypesManager.STRING,

				JavaTypesManager.BOOLEAN,

				JavaTypesManager.BYTE,

				// number
				JavaTypesManager.SHORT,
				JavaTypesManager.INTEGER,
				JavaTypesManager.LONG,
				JavaTypesManager.FLOAT,
				JavaTypesManager.DOUBLE,
				JavaTypesManager.BIGDECIMAL
			));

		Map<String, Parameter> parameters = new HashMap<String, Parameter>();
		if (null != uriPattern) {
			IMetadataTable connMetadata = conn.getMetadataTable();

			URITemplateUtils uriTemplate = new URITemplateUtils(uriPattern);
			List<String> uriVariables = uriTemplate.getVariables();
			// we are going to declare all uri template variables ("Path" parameter type by REST)
			for (String uriVariable : uriVariables) {
				Parameter parameter = null;
				String schemaFieldType = "id_String";

				for (IMetadataColumn column : connMetadata.getListColumns()) {
					// schema parameter name
					String schemaFieldName = column.getLabel();
					if ("body".equals(schemaFieldName)) {
						// "body" is reserved name for content parameter
						continue;
					}

					if (uriVariable.equals(schemaFieldName)) {
						String restParameterType = column.getComment();
						schemaFieldType = column.getTalendType();

						if (restParameterType == null || restParameterType.trim().length() == 0 || "Path".equalsIgnoreCase(restParameterType.trim())) {

							JavaType javaType = JavaTypesManager.getJavaTypeFromId(schemaFieldType);
							if (supportedJavaTypes.contains(javaType)) {
								String javaTypeWhole = JavaTypesManager.getTypeToGenerate(javaType, true);
								parameter = new Parameter(uriVariable, "Path", javaTypeWhole, column.getDefault());
							} else {
								// defined java type is unsupported - will define with default String type below (and this parameter will not be set to flow field)
								schemaFieldType = "id_String";
							}
						} else {
							// uri parameter hidden by parameter of another type in schema - will use generated variable name in rest service method
							String javaTypeWhole = JavaTypesManager.getTypeToGenerate(JavaTypesManager.STRING, true);
							parameter = new Parameter(uriVariable, "Path", javaTypeWhole, null, true);
						}
						break;
					}
				}
				if (null == parameter) {
					// either no uri parameter definition in flow schema
					// (both by uri variable name and schema parameter type = 'Path')
					// or unsupported java type in schema parameter definition
					// so we will declare default java type - String
					String javaTypeWhole = JavaTypesManager.getTypeToGenerate(JavaTypesManager.STRING, true);
					parameter = new Parameter(uriVariable, "Path", javaTypeWhole, null);
				}
				parameters.put("Path:" + uriVariable + ":" + schemaFieldType, parameter);
			}

			// now we are going to declare all other (non uri template) variables ("Query", "Form", "Header" parameter types by REST)
			for (IMetadataColumn column : connMetadata.getListColumns()) {
				// schema parameter name
				String schemaFieldName = column.getLabel();
				if (schemaFieldName.equals("body")) {
					// "body" is reserved name for content parameter
					continue;
				}

				// rest parameter type - if empty - default to 'Path'
				String restParameterType = column.getComment();
				if (restParameterType == null || restParameterType.trim().length() == 0) {
					restParameterType = "PATH";
				}
				restParameterType = restParameterType.trim().toUpperCase();

				// must be a supported parameter type
				if (!restParameterTypes.contains(restParameterType)) {
					// Report unsupported JAX-RS parameter type
					continue;
				}
				if ("PATH".equals(restParameterType)) {
					// we already collect uri template parameters
					continue;
				}

				// having at least one form parameter means form submissions are supported
				if ("FORM".equals(restParameterType)) {
					formSupported = true;
				}
				// convert from say "PATH" to "Path"
				restParameterType = restParameterType.substring(0, 1) + restParameterType.substring(1).toLowerCase();

				String schemaFieldType = column.getTalendType();
				JavaType javaType = JavaTypesManager.getJavaTypeFromId(schemaFieldType);

				if (supportedJavaTypes.contains(javaType)) {
					String javaTypeWhole = JavaTypesManager.getTypeToGenerate(javaType, true);
					Parameter parameter = new Parameter(schemaFieldName, restParameterType, javaTypeWhole, column.getDefault());
					parameters.put(restParameterType + ":" + schemaFieldName + ":" + schemaFieldType, parameter);
				} else {
					//Report that the Java type is unsupported
				}
			}
		}
%>
	@javax.ws.rs.<%=httpVerb%>()
<% if (null != uriPattern) { %>
	@javax.ws.rs.Path(<%=uriPattern%>)
<% } %>
<% if (formSupported) { %>
	@javax.ws.rs.Consumes("application/x-www-form-urlencoded")
<% } %>
	public javax.ws.rs.core.Response <%=connName%>(
		<%
			boolean paramCommaWritten = false;
			for (String parameter : parameters.keySet()) {
				Parameter param = parameters.get(parameter);
				if (!paramCommaWritten) {
					paramCommaWritten = true;
				} else {
					%>, <%
				}

				if (param.getDefaultValue() != null) { %>
					@javax.ws.rs.DefaultValue("<%=param.getDefaultValue()%>")
				<% } %>
				@javax.ws.rs.<%=param.getParamType()%>Param("<%=param.getName()%>") <%=param.getJavaType()%> <%=param.getVariableName()%>
		<%	} %>
		<% if (!("GET".equals(httpVerb) || "DELETE".equals(httpVerb) || formSupported)) {
			if (paramCommaWritten) {
				%>, <%
			} %>
			org.dom4j.Document body
		<% } %>
			) {

		java.util.Map<String, Object> request = new java.util.HashMap<String, Object>();
		request.put("VERB", "<%=httpVerb%>");
		request.put("OPERATION", "<%=connName%>");
		request.put("PATTERN", <%=uriPattern%>);
		<% if (!("GET".equals(httpVerb) || "DELETE".equals(httpVerb) || formSupported)) { %>
		request.put("BODY", body);
		<% } %>
		request.put("URI", ui.getPath());
		request.put("URI_BASE", ui.getBaseUri().toString());
		request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());

		//request.put("PARAMS", getPathParameters(uriInfo));
		java.util.Map<String, Object> parameters = new java.util.HashMap<String, Object>();
		<%	for (java.util.Map.Entry<String, Parameter> paramEntry : parameters.entrySet()) { %>
			parameters.put("<%=paramEntry.getKey()%>", <%=paramEntry.getValue().getVariableName()%>);
		<%	} %>
		request.put("PARAMS", parameters);

		return processRequest(request);
	}
<%
	}
}
%>
	public javax.ws.rs.core.Response handleWrongRequest(
			org.apache.cxf.jaxrs.ext.MessageContext context, int status, String error) {

		// System.out.println("wrong call [uri: " + context.getUriInfo().getPath() + " ; method: " + context.getRequest().getMethod() + " ; status: " + status + " ; error: " + error + "]");

		java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();
		wrongRequest.put("ERROR", error);
		wrongRequest.put("STATUS", status);
		wrongRequest.put("VERB", context.getRequest().getMethod());
		wrongRequest.put("URI", context.getUriInfo().getPath());
		wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri().toString());
		wrongRequest.put("URI_ABSOLUTE", context.getUriInfo().getAbsolutePath().toString());

		return processRequest(wrongRequest);
	}
}

public static class ExceptionMapper4TalendJobRestService extends org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

	@javax.ws.rs.core.Context private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

	private RestServiceProviderImpl4TalendJob provider;

	public ExceptionMapper4TalendJobRestService(RestServiceProviderImpl4TalendJob provider) {
		this.provider = provider;
	}

	public javax.ws.rs.core.Response toResponse(javax.ws.rs.WebApplicationException ex) {
		String error = null;
		javax.ws.rs.core.Response response = ex.getResponse();
		if (null != response && null != response.getEntity()) {
			error = response.getEntity().toString();
		}
		response = super.toResponse(ex);
		if (null == error) {
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			} else {
				error = null == ex.getCause() ? ex.getMessage() : ex.getCause().getMessage();
			}
		}
		response = provider.handleWrongRequest(messageContext, response.getStatus(), error);

		java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext.getHttpHeaders().getAcceptableMediaTypes();
		String type = accepts.isEmpty() ? "application/xml" : accepts.get(0).toString();
		return javax.ws.rs.core.Response.status(response.getStatus()).entity(response.getEntity()).type(type).build();
	}
}


Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

class Thread4RestServiceProviderEndpoint extends Thread {
<%
	String defaultUri = (String) System.getProperties().get("restServiceDefaultUri");
	if (null == defaultUri || defaultUri.trim().isEmpty() || !defaultUri.contains("://")) {
		defaultUri = "http://127.0.0.1:8090/";
	} else if (!defaultUri.endsWith("/")) {
		defaultUri = defaultUri + "/";
	}
%>
	private final String defaultEndpointUrl = "<%=defaultUri%>";

	private String endpointUrl = <%=ElementParameterParser.getValue(tRESTRequestNode, "__REST_ENDPOINT__")%>;

	private org.apache.cxf.endpoint.Server server;

	private final <%=process.getName()%> job;

	public Thread4RestServiceProviderEndpoint(<%=process.getName()%> job) {
		this.job = job;
	}

	public void run() {
		try {
			if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
				endpointUrl = defaultEndpointUrl;
			} else if (!endpointUrl.contains("://")) { // relative
				if (endpointUrl.startsWith("/")) {
					endpointUrl = endpointUrl.substring(1);
				}
				endpointUrl = defaultEndpointUrl + endpointUrl;
			}

			RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(job);

			org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf =
					new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
			java.util.List<Object> providers = new java.util.ArrayList<Object>();
			providers.add(new ExceptionMapper4TalendJobRestService(provider));
			providers.add(new DOM4JProvider());
			org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider =
					new org.apache.cxf.jaxrs.provider.json.JSONProvider();
			jsonProvider.setIgnoreNamespaces(true);
			providers.add(jsonProvider);
			sf.setProviders(providers);
			sf.setTransportId("http://cxf.apache.org/transports/http");
			sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
			sf.setResourceProvider(RestServiceProviderImpl4TalendJob.class,
					new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(provider));
			sf.setAddress(endpointUrl);
			server = sf.create();

			// System.out.println("REST service [endpoint: " + endpointUrl + "] published");
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	public void stopEndpoint() {
		if (null != server) {
			server.stop();
			server.destroy();
			// System.out.println("REST service [endpoint: " + endpointUrl + "] unpublished");
		}
	}
}
<%
}
%>
