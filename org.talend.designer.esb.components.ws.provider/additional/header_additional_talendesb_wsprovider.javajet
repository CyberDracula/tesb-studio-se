<%@ jet
	package="org.talend.designer.codegen.translators.common"
	imports="
		java.util.Vector

		org.talend.designer.codegen.config.CodeGeneratorArgument

		org.talend.core.model.process.INode
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.ElementParameterParser
	"
	class="Header_additional"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
Vector v = (Vector) codeGenArgument.getArgument();
IProcess process = (IProcess) v.get(0);

boolean actAsProvider = !process.getNodesOfType("tESBProviderRequestLoop").isEmpty();
boolean actAsConsumer = !process.getNodesOfType("tESBConsumer").isEmpty();
%>

<% if (!actAsConsumer) { %>
	private ESBEndpointRegistry registry = null;

	public void setEndpointRegistry(ESBEndpointRegistry registry) {
	}

	private Object wrapPayload(Object payload, Object customProperties) {
		java.util.Map<String, Object> outputWrapped = new java.util.HashMap<String, Object>();
		outputWrapped.put("PAYLOAD", payload);
		if (null != customProperties) {
			outputWrapped.put("SAM-PROPS", customProperties);
		}
		return outputWrapped;
	}
<% } %>

<%
if (actAsProvider
	|| !process.getNodesOfType("tESBProviderResponse").isEmpty()
	|| !process.getNodesOfType("tESBProviderFault").isEmpty()) { %>
	interface ESBProviderCallbackTalendJobInner extends ESBProviderCallback {
		void setCustomProperties(java.util.Map<String, String> props);
		void sendFault(Throwable e);
		void sendBusinessFault(String faultString, org.dom4j.Document faultDetail);
	}
<% } %>

<% if (actAsProvider) { %>
	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
		this.callback = callback;
	}

<%
	// Web Service Provider
	INode tESBProviderRequestNode = process.getNodesOfType("tESBProviderRequestLoop").get(0);
	String cid = tESBProviderRequestNode.getUniqueName();
	cid = cid.replaceAll("_Loop", "");

	String projectName = codeGenArgument.getCurrentProjectName();
	String processName = process.getName();

	String endpointUrl = ElementParameterParser.getValue(tESBProviderRequestNode, "__ENDPOINT_URI__");

	String wsdlLocation = ElementParameterParser.getValue(tESBProviderRequestNode, "__WSDL_LOCATION__");

	String serviceNS = ElementParameterParser.getValue(tESBProviderRequestNode, "__SERVICE_NS__");
	String serviceName = ElementParameterParser.getValue(tESBProviderRequestNode, "__SERVICE_NAME__");
	if ("--DEFAULT--".equals(serviceName)) {
		serviceName = projectName + "_" + processName;
	}

	String portNS = ElementParameterParser.getValue(tESBProviderRequestNode, "__PORT_NS__");
	String portName = ElementParameterParser.getValue(tESBProviderRequestNode, "__PORT_NAME__");
	if ("--DEFAULT--".equals(portName)) {
		portName = serviceName + "_Port";
	}

	String operationName = ElementParameterParser.getValue(tESBProviderRequestNode, "__OPERATION_NAME__");
	String operationNS = ElementParameterParser.getValue(tESBProviderRequestNode, "__OPERATION_NS__");
	if (null == operationNS || operationNS.isEmpty()) {
		operationNS = serviceNS;
	}

	String communicationStyle = ElementParameterParser.getValue(tESBProviderRequestNode, "__COMMUNICATION_STYLE__");
	boolean isOneWay = false;
	if (null != communicationStyle && !communicationStyle.isEmpty()) {
		isOneWay = "one-way".equals(communicationStyle);
	} else {
		isOneWay = process.getNodesOfType("tESBProviderFault").isEmpty()
			&& process.getNodesOfType("tESBProviderResponse").isEmpty();
	}
%>
	public ESBEndpointInfo getEndpoint() {
		return new ESBEndpointInfo() {
			@SuppressWarnings("serial")
			private java.util.Map<String, Object> props = new java.util.HashMap<String, Object>() {{
				// "request-response" or "one-way"
				put("COMMUNICATION_STYLE", "<%=(isOneWay)?"one-way":"request-response"%>");
				put("dataFormat", "PAYLOAD");
				put("portName", "{<%=portNS%>}<%=portName%>");
				put("serviceName", "{<%=serviceNS%>}<%=serviceName%>");
				put("defaultOperationName", "<%=operationName%>");
				put("defaultOperationNameSpace", "<%=operationNS%>");
				put("publishedEndpointUrl", "<%=endpointUrl%>");
			}};

			public String getEndpointKey() {
				return "cxf";
			}

			public String getEndpointUri() {
				// projectName + "_" + processName
				return "<%=projectName%>_<%=processName%>";
			}

			public java.util.Map<String, Object> getEndpointProperties() {
				return props;
			}
		};
	}




/**
 * queued message exchange
 */
public class QueuedExchangeContextImpl<T> {

	/**
	 * Exchange timeout in seconds
	 */
	private static final long EXCHANGE_TIMEOUT = 50;

	private final java.util.concurrent.Exchanger<Exception> exceptionExchange =
		new java.util.concurrent.Exchanger<Exception>();
	private final java.util.concurrent.CountDownLatch latch =
		new java.util.concurrent.CountDownLatch(1);

	private final T input;

	private T output = null;
	private Throwable fault = null;

	public QueuedExchangeContextImpl(T inMsg) {
		this.input = inMsg;
	}

	/**
	 * Don't forget to call this method when you are done
	 * with processing of the {@link QueuedExchangeContext}
	 */
	public void release() throws Exception {
		latch.countDown();
		Exception exception;
		try {
			exception = exceptionExchange.exchange(null, EXCHANGE_TIMEOUT,
					java.util.concurrent.TimeUnit.SECONDS);
		} catch (InterruptedException e) {
			throw new Exception(e);
		} catch (java.util.concurrent.TimeoutException e) {
			throw new Exception(e);
		}
		if (exception != null) {
			throw exception;
		}
	}

	/**
	 * This operation have to be called on the Web Service
	 * thread to send response if required
	 *
	 * @throws InterruptedException
	 */
	public void completeQueuedProcessing() throws InterruptedException {
		exceptionExchange.exchange(null);
	}

	/**
	 * @throws InterruptedException
	 */
	void waitForRelease(long timeout, java.util.concurrent.TimeUnit unit)
			throws InterruptedException {
		latch.await(timeout, unit);
	}

	public T getInputMessage() {
		return input;
	}

	public void serveOutputMessage(T response) {
		output = response;
	}

	public void serveFault(Throwable fault) {
		this.fault = fault;
	}

	public boolean isFault() {
		return fault != null;
	}

	public T getResponse() {
		return output;
	}

	public Throwable getFault() {
		return fault;
	}
}

/**
 * message exchange controller
 */
public class QueuedMessageHandlerImpl<T> implements ESBProviderCallback {
	private final int MAX_QUEUE_SIZE = 1000;

	private final int WAIT_TIMEOUT_SECONDS = 120;

	private final java.util.concurrent.BlockingQueue<QueuedExchangeContextImpl<?>> queue =
		new java.util.concurrent.LinkedBlockingQueue<QueuedExchangeContextImpl<?>>(MAX_QUEUE_SIZE);

	/**
	 * This method add a newly created
	 * {@link QueuedExchangeContextImpl} into the internal
	 * blocking queue where consumer thread is waiting for it.
	 * Then it waits until the {@link QueuedExchangeContextImpl}
	 * will be completed for request-response operations
	 */
	public QueuedExchangeContextImpl<T> invoke(T request) {
		QueuedExchangeContextImpl<T> context =
			new QueuedExchangeContextImpl<T>(request);
		boolean inserted = queue.offer(context);
		if (!inserted) {
			try {
				context.release();
			} catch (Exception e) {
				e.printStackTrace();
			}
			// context.serveFault("job pool overflow exceed", null);
			throw new RuntimeException(
					"Can't queue request, queue size of "
							+ MAX_QUEUE_SIZE + " is exceeded");
		} else {
			try {
				context.waitForRelease(WAIT_TIMEOUT_SECONDS,
						java.util.concurrent.TimeUnit.SECONDS);
			} catch (InterruptedException ie) {
				// context.serveFault("job execution timeout", ie);
				throw new RuntimeException(
						"job execution timeout: " + ie.getMessage());
			}
		}
		return context;
	}

	QueuedExchangeContextImpl<T> currentExchangeContext;

	public T getRequest() throws ESBJobInterruptedException {
		currentExchangeContext = null;
		try {
			currentExchangeContext = (QueuedExchangeContextImpl<T>) queue.take();
		} catch (InterruptedException e) {
			// e.printStackTrace();
			throw new RuntimeException(e);
		}
		return currentExchangeContext.getInputMessage();
	}

	public void sendResponse(Object output) {
		if (null == currentExchangeContext) {
			throw new RuntimeException("sendResponse() invoked before getRequest()");
		}

		if (output instanceof Throwable) {
			// fault
			currentExchangeContext.serveFault((Throwable) output);
		} else {
			// response
			currentExchangeContext.serveOutputMessage((T) output);
		}

		try {
			currentExchangeContext.release();
		} catch (Exception e) {
			// e.printStackTrace();
			throw new RuntimeException(e);
		}
	}
}

/**
 * web service provider implementation
 */
<% if (null == wsdlLocation || wsdlLocation.trim().isEmpty()) { %>
@javax.jws.WebService(
		name = "<%=serviceName%>PortType",
		targetNamespace = "<%=serviceNS%>"
	)
<% } %>
@javax.jws.soap.SOAPBinding(
		parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.BARE
	)
@javax.xml.ws.ServiceMode(
		value = javax.xml.ws.Service.Mode.PAYLOAD
	)
@javax.xml.ws.WebServiceProvider(
<% if (null != wsdlLocation && !wsdlLocation.trim().isEmpty()) { %>
		wsdlLocation="<%=wsdlLocation%>",<% } %>
		targetNamespace="<%=serviceNS%>",
		serviceName="<%=serviceName%>",
		portName="<%=portName%>"
	)
public class ESBProvider_<%=cid%> implements
		javax.xml.ws.Provider<javax.xml.transform.Source> {

	private final javax.xml.ws.WebServiceProvider annotation =
			ESBProvider_<%=cid%>.class.getAnnotation(
					javax.xml.ws.WebServiceProvider.class);
	private final String TARGET_NS = annotation.targetNamespace();
	private final String SERVICE_NAME = annotation.serviceName();
	private final String PORT_NAME = annotation.portName();

	private final javax.xml.namespace.QName serviceName =
			new javax.xml.namespace.QName(TARGET_NS, SERVICE_NAME);
	private final javax.xml.namespace.QName portName =
			new javax.xml.namespace.QName(TARGET_NS, PORT_NAME);
	private final javax.xml.namespace.QName operationName =
			new javax.xml.namespace.QName("<%=operationNS%>", "<%=operationName%>");

	private javax.xml.transform.TransformerFactory factory =
			javax.xml.transform.TransformerFactory.newInstance();
	private QueuedMessageHandlerImpl<org.dom4j.Document> messageHandler;

	@javax.annotation.Resource()
	private javax.xml.ws.WebServiceContext context;

	public ESBProvider_<%=cid%>(
			QueuedMessageHandlerImpl<org.dom4j.Document> messageHandler) {
		this.messageHandler = messageHandler;
	}

<% if (isOneWay) { %>
	@javax.jws.Oneway()
<% } %>
	public javax.xml.transform.Source invoke(javax.xml.transform.Source request) {

		try {
//			javax.xml.namespace.QName operation = (javax.xml.namespace.QName) context
//					.getMessageContext().get(javax.xml.ws.handler.MessageContext.WSDL_OPERATION);
//			javax.xml.namespace.QName port = (javax.xml.namespace.QName) context
//					.getMessageContext().get(javax.xml.ws.handler.MessageContext.WSDL_PORT);
//			javax.xml.namespace.QName service = (javax.xml.namespace.QName) context
//					.getMessageContext().get(javax.xml.ws.handler.MessageContext.WSDL_SERVICE);
//			if (serviceName.equals(service) && portName.equals(port) && operationName.equals(operation)) {
//				// System.out.println("request to implemented operation");
//			} else {
//				throw new RuntimeException("operation not implemented by job");
//			}

			java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();
			factory.newTransformer().transform(request, new javax.xml.transform.stream.StreamResult(os));
			org.dom4j.Document requestDoc = new org.dom4j.io.SAXReader().read(
					new java.io.ByteArrayInputStream(os.toByteArray()));

			// System.out.println("request: " + requestDoc.asXML());

			QueuedExchangeContextImpl<org.dom4j.Document> messageExchange = messageHandler.invoke(requestDoc);

			try {
<% if (isOneWay) { %>
				return null;
<% } else { %>
				if (messageExchange.isFault()) {
					throw messageExchange.getFault();
				} else {
					org.dom4j.Document responseDoc = messageExchange.getResponse();
					if (null == responseDoc) {
						throw new RuntimeException("no response provided by Talend job");
					}
					// System.out.println("response: " + responseDoc.asXML());

					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					new org.dom4j.io.XMLWriter(baos).write(responseDoc);
					return new javax.xml.transform.stream.StreamSource(
							new java.io.ByteArrayInputStream(baos.toByteArray()));
				}
<% } %>
			} finally {
				messageExchange.completeQueuedProcessing();
			}
		} catch (RuntimeException ex) {
			throw ex;
		} catch (Throwable ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}
}

public class ESBProviderCallbackTalendJobWrapper_<%=cid%> implements ESBProviderCallbackTalendJobInner {

	private final String TNS = ESBProvider_<%=cid%>.class.getAnnotation(
			javax.xml.ws.WebServiceProvider.class).targetNamespace();

	private ESBProviderCallback esbProviderCallback;
	private java.util.Map<String, String> customProperty;

	public ESBProviderCallbackTalendJobWrapper_<%=cid%>(ESBProviderCallback callback) {
		esbProviderCallback = callback;
	}

	public Object getRequest() throws ESBJobInterruptedException {
		return esbProviderCallback.getRequest();
	}

	public void setCustomProperties(java.util.Map<String, String> props) {
		customProperty = props;
	}

	public void sendResponse(Object response) {
		esbProviderCallback.sendResponse(wrapOutput(response));
	}

	public void sendFault(Throwable error) {
		RuntimeException talendJobError;
		if (error instanceof RuntimeException) {
			talendJobError = (RuntimeException) error;
		} else {
			talendJobError = new RuntimeException(
					"Talend job execution error", error);
		}
		esbProviderCallback.sendResponse(talendJobError);
	}

	public void sendBusinessFault(String faultString,
			org.dom4j.Document faultDetail) {

		try {
			javax.xml.soap.SOAPFactory soapFactory =
				javax.xml.soap.SOAPFactory.newInstance();
			javax.xml.soap.SOAPFault soapFault = soapFactory.createFault(
					faultString, new javax.xml.namespace.QName(TNS, "businessFault"));
			if (null != faultDetail) {
				// System.out.println("business fault details: " + faultDoc.asXML());
				// A special version of DOMWriter that does not write xmlns:foo attributes
				org.dom4j.io.DOMWriter writer = new org.dom4j.io.DOMWriter() {
					protected void writeNamespace(org.w3c.dom.Element domElement, org.dom4j.Namespace namespace) {
						// Do nothing
					}
				};
				org.w3c.dom.Document faultDetailDom = writer.write(faultDetail);
				soapFault.addDetail().appendChild(
						soapFault.getOwnerDocument().importNode(
								faultDetailDom.getDocumentElement(), true));
			}
			esbProviderCallback.sendResponse(
					wrapOutput(new javax.xml.ws.soap.SOAPFaultException(soapFault)));
		} catch (Exception e) {
			this.sendFault(e);
		}
	}

	private Object wrapOutput(Object output) {
		if (esbProviderCallback instanceof QueuedMessageHandlerImpl) {
			return output;
		}
		return wrapPayload(output, customProperty);
	}
}

class HandlerThread_<%=cid%> extends Thread {

	private javax.xml.ws.Endpoint endpoint;
	QueuedMessageHandlerImpl<org.dom4j.Document> handler;

	String endpointUrl = "<%=endpointUrl%>";

	public HandlerThread_<%=cid%>(
			QueuedMessageHandlerImpl<org.dom4j.Document> handler) {
		this.handler = handler;
	}

	public void run() {

<%
	//http://jira.talendforge.org/browse/TESB-3603 Clean up default port codes
	//String defaultPort = (String) System.getProperties().get("wsHttpPort");
	//if (null == defaultPort || defaultPort.trim().isEmpty()) {
	//	defaultPort = "8088";
	//}
%>
		// test for busy
		java.net.ServerSocket ss = null;
		try {
			java.net.URL endpointURL = new java.net.URL(endpointUrl);
			String host = endpointURL.getHost();
			int port = endpointURL.getPort();
			if ("localhost".equals(host) || host.startsWith("127.0.0")) {
				try {
					ss = new java.net.ServerSocket(port);
				} catch (IOException e) {
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} finally {
					if (ss != null) {
						try {
							ss.close();
						} catch (IOException e) {
							// ignore
						}
					}
				}
				try {
					// ok, let's doublecheck for silent listeners
					java.net.Socket cs = new java.net.Socket(host, port);
					// if succeed - somebody silently listening, fail!
					cs.close();
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} catch (IOException e) {
					//ok, nobody listens, proceed
				}
			}
		} catch (java.net.MalformedURLException e) {
			// rethrow exception
			throw new IllegalArgumentException(
					"Cannot start provider with uri: " + endpointUrl + ". Malformed URL.");
		}

		// null - WSDL value should be used
		endpoint = javax.xml.ws.Endpoint.publish(/* null */ endpointUrl, new ESBProvider_<%=cid%>(handler));

		System.out.println("web service [endpoint: " + endpointUrl + "] published");
	}

	public void stopEndpoint() {
		if (null != endpoint) {
			endpoint.stop();
			System.out.println("web service [endpoint: " + endpointUrl + "] unpublished");
		}
	}
}

<% } // end if (actAsProvider) %>
