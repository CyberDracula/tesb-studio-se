<%@ jet 
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IElementParameter
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.codegen.config.NodeParamsHelper
    java.util.List
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	String endpointVar = "endpoint_" + cid;

	NodeParamsHelper paramsHelper = new NodeParamsHelper(node);

	String acceptType = paramsHelper.getVisibleStringParam("__ACCEPT_TYPE__");
	String responseClass = "*/*".equals(acceptType) ? "String.class" : "org.w3c.dom.Document.class";
	String contentType = paramsHelper.getVisibleStringParam("__CONTENT_TYPE__");

	String useCorrelation = ElementParameterParser.getValue(node, "__ENABLE_CORRELATION__");
	String correlationValue = ElementParameterParser.getValue(node, "__CORRELATION_VALUE__");

	//boolean isStudioEEVersion = org.talend.core.PluginChecker.isTIS();

	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns.size()>0) {
		IConnection iConnection = conns.get(0);
		INode source = iConnection.getSource();
		if ("cErrorHandler".equals(source
				.getComponent().getName())
				&& source.getIncomingConnections()
						.size() < 1){
%>
			.from(<%=endpointVar%>).removeHeader(org.apache.camel.component.cxf.common.message.CxfConstants.OPERATION_NAME)
<%
		}else{
			if("true".equals(useCorrelation)){
				if(!"".equals(correlationValue) && !"\"\"".equals(correlationValue)){
%>					
					.setHeader(org.talend.esb.policy.correlation.feature.CorrelationIDFeature.MESSAGE_CORRELATION_ID).simple(<%=correlationValue%>)
<%				}else{
%>
					.removeHeader(org.talend.esb.policy.correlation.feature.CorrelationIDFeature.MESSAGE_CORRELATION_ID)
<%				}
			}
%>
		.process(new org.apache.camel.Processor() {
				public void process(org.apache.camel.Exchange exchange) throws Exception {
					exchange.setPattern(org.apache.camel.ExchangePattern.InOut);
					org.apache.camel.Message inMessage = exchange.getIn();
					inMessage.setHeader(org.apache.camel.Exchange.HTTP_PATH, <%=ElementParameterParser.getValue(node, "__PATH__")%>);
					inMessage.setHeader(org.apache.camel.Exchange.HTTP_METHOD, "<%=ElementParameterParser.getValue(node, "__HTTP_METHOD__")%>");
<% if (!acceptType.isEmpty()) { %>
					
					inMessage.setHeader(org.apache.camel.Exchange.ACCEPT_CONTENT_TYPE, "<%=acceptType%>");
					inMessage.setHeader(org.apache.camel.component.cxf.CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, <%=responseClass%>);
<% } %>
<% if (!contentType.isEmpty()) { %>
					inMessage.setHeader(org.apache.camel.Exchange.CONTENT_TYPE, "<%=contentType%>");
<% } %>
<% if ("true".equals(ElementParameterParser.getValue(node, "__ENABLE_SECURITY__"))) {
		if("BASIC".equals(ElementParameterParser.getValue(node, "__SECURITY_TYPE__"))) { %>
					inMessage.setHeader("Authorization", "Basic " + org.apache.cxf.common.util.Base64Utility.encode((<%=ElementParameterParser.getValue(node, "__USERNAME__")%> + ':' + <%=ElementParameterParser.getValue(node, "__PASSWORD__")%>).getBytes()));
<%		}
	}
%>
				}
			}).to(<%=endpointVar%>)
<%
		}
	} else {
%>
		from(<%=endpointVar%>).removeHeader(org.apache.camel.component.cxf.common.message.CxfConstants.OPERATION_NAME)
<%
	}
%>
