<%@ jet
    package="org.talend.designer.codegen.translators.common"
    imports="
        java.util.Vector

        org.talend.designer.codegen.config.CodeGeneratorArgument

        org.talend.core.model.process.INode
        org.talend.core.model.process.IProcess
    "
    class="Header_additional"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
Vector v = (Vector) codeGenArgument.getArgument();
IProcess process = (IProcess) v.get(0);

boolean actAsProvider = !process.getNodesOfType("tESBProviderRequest").isEmpty();
boolean actAsConsumer = !process.getNodesOfType("tESBConsumer").isEmpty();

if (actAsConsumer) { %>
    @SuppressWarnings("serial")
    public static class GenericFaultInfoException extends org.apache.cxf.frontend.FaultInfoException {

        private org.dom4j.Document faultInfo;

        public GenericFaultInfoException(String arg0, javax.xml.transform.Source source) {
            super(arg0);
            try {
                faultInfo = GenericConsumer.sourceToDocument(source);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public Object getFaultInfo() {
            return faultInfo;
        }
    }

    static class GenericServiceClass {
        public Object invoke(Object param) throws GenericFaultInfoException {
            return null;
        }
    }

    static class GenericConsumer {

        private static final javax.xml.transform.TransformerFactory FACTORY = javax.xml.transform.TransformerFactory.newInstance();

        private javax.xml.namespace.QName serviceQName;
        private javax.xml.namespace.QName portQName;
        private javax.xml.namespace.QName operationQName;
        private boolean isRequestResponse;
        private String soapAction;
        private String address;
        private String wsdlURL;

        private java.util.Collection<org.apache.cxf.feature.AbstractFeature> esbFeatures;
        private org.apache.cxf.Bus bus;

        private String authType;
        private String username;
        private String password;

        private String proxyServer;
        private int proxyPort;
        private String proxyUsername;
        private String proxyPassword;

        private long connectionTimeout;
        private long receiveTimeout;

        private boolean logMessages;

        private org.dom4j.Document soapHeaders;

        public void setServiceQName(javax.xml.namespace.QName serviceQName) {
            this.serviceQName = serviceQName;
        }

        public void setPortQName(javax.xml.namespace.QName portQName) {
            this.portQName = portQName;
        }

        public void setOperationQName(javax.xml.namespace.QName operationQName) {
            this.operationQName = operationQName;
        }

        public void setIsRequestResponse(boolean isRequestResponse) {
            this.isRequestResponse = isRequestResponse;
        }

        public void setSoapAction(String soapAction) {
            this.soapAction = soapAction;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        public void setWsdlURL(String wsdlURL) {
            this.wsdlURL = wsdlURL;
        }

        public void setEsbFeatures(
                java.util.Collection<org.apache.cxf.feature.AbstractFeature> esbFeatures) {
            this.esbFeatures = esbFeatures;
        }

        public void setBus(org.apache.cxf.Bus bus) {
            this.bus = bus;
        }

        public void setAuthType(String authType) {
            this.authType = authType;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public void setProxyServer(String proxyServer) {
            this.proxyServer = proxyServer;
        }

        public void setProxyPort(int proxyPort) {
            this.proxyPort = proxyPort;
        }

        public void setProxyUsername(String proxyUsername) {
            this.proxyUsername = proxyUsername;
        }

        public void setProxyPassword(String proxyPassword) {
            this.proxyPassword = proxyPassword;
        }

        public void setConnectionTimeout(long connectionTimeout) {
            this.connectionTimeout = connectionTimeout;
        }

        public void setReceiveTimeout(long receiveTimeout) {
            this.receiveTimeout = receiveTimeout;
        }

        public void setLogMessages(boolean logMessages) {
            this.logMessages = logMessages;
        }

        public void setSoapHeaders(org.dom4j.Document soapHeaders) {
            this.soapHeaders = soapHeaders;
        }

        public org.dom4j.Document invoke(org.dom4j.Document doc) throws GenericFaultInfoException, org.apache.cxf.interceptor.Fault {
            org.apache.cxf.frontend.ClientFactoryBean clientFactory = new org.apache.cxf.frontend.ClientFactoryBean();
            clientFactory.getServiceFactory().getServiceConfigurations().add(0, new org.apache.cxf.service.factory.AbstractServiceConfiguration() {
                @Override
                public Boolean isOperation(java.lang.reflect.Method method) {
                    return "invoke".equals(method.getName());
                }
                @Override
                public javax.xml.namespace.QName getOperationName(org.apache.cxf.service.model.InterfaceInfo service, java.lang.reflect.Method method) {
                    return operationQName;
                }
                @Override
                public Boolean hasOutMessage(java.lang.reflect.Method m) {
                    return isRequestResponse;
                }
                @Override
                public String getAction(org.apache.cxf.service.model.OperationInfo op, java.lang.reflect.Method method) {
                    return soapAction;
                }
                @Override
                public Boolean isWrapped() {
                    return Boolean.FALSE;
                }
                @Override
                public javax.xml.namespace.QName getFaultName(org.apache.cxf.service.model.InterfaceInfo service, org.apache.cxf.service.model.OperationInfo o,
                        Class<?> exClass, Class<?> beanClass) {
                    for (org.apache.cxf.service.model.FaultInfo fi : o.getFaults()) {
                        for (org.apache.cxf.service.model.MessagePartInfo mpi : fi.getMessageParts()) {
                            return mpi.getConcreteName();
                        }
                    }
                    return null;
                }
            });
            if (null != wsdlURL) {
                clientFactory.setWsdlURL(wsdlURL);
            }
            clientFactory.setServiceClass(GenericServiceClass.class);

            clientFactory.setServiceName(serviceQName);
            clientFactory.setEndpointName(portQName);

            clientFactory.setAddress(address);
            clientFactory.getProperties(true).put("soap.no.validate.parts", Boolean.TRUE);

            if (null != bus) {
                clientFactory.setBus(bus);
            }
            if (null != esbFeatures) {
                clientFactory.getFeatures().addAll(esbFeatures);
            }
            if (logMessages) {
                clientFactory.getFeatures().add(new org.apache.cxf.feature.LoggingFeature());
            }

            org.apache.cxf.endpoint.Client client = clientFactory.create();
            client.getEndpoint().getService().setDataBinding(new org.apache.cxf.databinding.source.SourceDataBinding());

            org.apache.cxf.transport.http.HTTPConduit conduit = (org.apache.cxf.transport.http.HTTPConduit) client.getConduit();
            if ("BASIC".equals(authType)) {
                org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy = new org.apache.cxf.configuration.security.AuthorizationPolicy();
                authorizationPolicy.setUserName(username);
                authorizationPolicy.setPassword(password);
                authorizationPolicy.setAuthorizationType("Basic");
                conduit.setAuthorization(authorizationPolicy);
            } else if ("DIGEST".equals(authType)) {
                org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy = new org.apache.cxf.configuration.security.AuthorizationPolicy();
                authorizationPolicy.setUserName(username);
                authorizationPolicy.setPassword(password);
                authorizationPolicy.setAuthorizationType("Digest");
                conduit.setAuthorization(authorizationPolicy);
            } else if ("TOKEN".equals(authType)) {
                java.util.Map<String, Object> wssProps = new java.util.HashMap<String, Object>();
                wssProps.put(org.apache.ws.security.handler.WSHandlerConstants.ACTION, org.apache.ws.security.handler.WSHandlerConstants.USERNAME_TOKEN);
                wssProps.put(org.apache.ws.security.handler.WSHandlerConstants.USER, username);
                wssProps.put(org.apache.ws.security.handler.WSHandlerConstants.PASSWORD_TYPE, org.apache.ws.security.WSConstants.PW_TEXT);
                wssProps.put(org.apache.ws.security.handler.WSHandlerConstants.PW_CALLBACK_REF,
                        new javax.security.auth.callback.CallbackHandler() {
                            public void handle(javax.security.auth.callback.Callback[] callbacks)
                                    throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException {
                                org.apache.ws.security.WSPasswordCallback pc = (org.apache.ws.security.WSPasswordCallback) callbacks[0];
                                pc.setPassword(password);
                            }
                        });
                client.getEndpoint()
                        .getOutInterceptors().add(new org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor(wssProps));
            }

            org.apache.cxf.transports.http.configuration.HTTPClientPolicy httpClientPolicy = conduit.getClient();
            if (null != proxyServer) {
                httpClientPolicy.setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType.HTTP);
                httpClientPolicy.setProxyServer(proxyServer);
                httpClientPolicy.setProxyServerPort(proxyPort);
            }
            if (null != proxyUsername && !"".equals(proxyUsername)) {
                org.apache.cxf.configuration.security.ProxyAuthorizationPolicy proxyAuthorization = new org.apache.cxf.configuration.security.ProxyAuthorizationPolicy();
                proxyAuthorization.setUserName(proxyUsername);
                proxyAuthorization.setPassword(proxyPassword);
                conduit.setProxyAuthorization(proxyAuthorization);
            }
            httpClientPolicy.setConnectionTimeout(connectionTimeout);
            httpClientPolicy.setReceiveTimeout(receiveTimeout);

            try {
                if (soapHeaders != null) {
                    java.util.List<org.apache.cxf.headers.Header> headers = new java.util.ArrayList<org.apache.cxf.headers.Header>();
                    javax.xml.transform.dom.DOMResult result = new javax.xml.transform.dom.DOMResult();
                    FACTORY.newTransformer().transform(new org.dom4j.io.DocumentSource(soapHeaders), result);
                    for (org.w3c.dom.Node node = ((org.w3c.dom.Document) result.getNode()).getDocumentElement().getFirstChild();
                            node != null;
                            node = node.getNextSibling()) {
                        if (org.w3c.dom.Node.ELEMENT_NODE == node.getNodeType()) {
                            headers.add(new org.apache.cxf.headers.Header(new javax.xml.namespace.QName(node.getNamespaceURI(), node.getLocalName()), node));
                        }
                    }
                    client.getRequestContext().put(org.apache.cxf.headers.Header.HEADER_LIST, headers);
                }

                Object[] results = client.invoke(operationQName, new org.dom4j.io.DocumentSource(doc));
                if (results != null && results.length > 0) {
                    return sourceToDocument((javax.xml.transform.Source) results[0]);
                }
            } catch (GenericFaultInfoException e) {
                throw e;
            } catch (org.apache.cxf.interceptor.Fault e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.cxf.interceptor.Fault(e);
            }
            return null;
        }

        public static org.dom4j.Document sourceToDocument(javax.xml.transform.Source source) throws Exception{
            java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();
            FACTORY.newTransformer().transform(source, new javax.xml.transform.stream.StreamResult(os));
            return new org.dom4j.io.SAXReader().read(new java.io.ByteArrayInputStream(os.toByteArray()));
        }

    }

<% } // end if (actAsConsumer) %>

<% if (actAsProvider || actAsConsumer) {%>
    private Object wrapPayload(Object payload, Object customProperties) {
        java.util.Map<String, Object> outputWrapped = new java.util.HashMap<String, Object>();
        outputWrapped.put("PAYLOAD", payload);
        if (null != customProperties) {
            outputWrapped.put("SAM-PROPS", customProperties);
        }
        return outputWrapped;
    }
<% } %>
