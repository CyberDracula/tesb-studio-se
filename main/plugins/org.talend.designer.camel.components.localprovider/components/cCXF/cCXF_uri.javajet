<%@ jet 
%>
<%
// included in header_route.javajet
// available variables :
// INode node;
// String cid;
// String componentName;
// NodeParamsHelper helper;
// return values:
// String uri = ""; generate the endpoint uri.
// String statements = null; generate the statements before wrapping endpoint uri.

String url = ElementParameterParser.getValue(node, "__ADDRESS__").trim();

String dataformat = ElementParameterParser.getValue(node, "__DATAFORMAT__");

String useServiceRegistry = ElementParameterParser.getValue(node, "__ENABLE_REGISTRY__");
if(!isStudioEEVersion || "RAW".equals(dataformat) || "CXF_MESSAGE".equals(dataformat)){
	useServiceRegistry = "false";
}

String useSecurity = ElementParameterParser.getValue(node, "__ENABLE_SECURITY__");
if("true".equals(useServiceRegistry) || "RAW".equals(dataformat) || "CXF_MESSAGE".equals(dataformat)){
	useSecurity = "false";
}

List<? extends IConnection> conns = node.getIncomingConnections();
if ("true".equals(ElementParameterParser.getValue(node, "__ENABLE_SL__")) 
		&&  "false".equals(useServiceRegistry)) {
	if (!conns.isEmpty()) {
		// consumer role
		url = "((null == bundleContext) ? " + url + " : \"locator://locator/\")";
	}
}

CamelEndpointBuilder eb = CamelEndpointBuilder.getBuilder();
eb.setComponent("cxf").setName(url);

String serviceType = ElementParameterParser.getValue(node, "__SERVICE_TYPE__");
if ("wsdlURL".equals(serviceType)) {

	//http://jira.talendforge.org/browse/TESB-6226
    String filePath = "";
	
	String wsdlType = ElementParameterParser.getValue(node, "__WSDL_TYPE__");
	if("file".equals(wsdlType)){
	  filePath =  ElementParameterParser.getValue(node, "__WSDL_FILE__");
	}else{
		filePath =  ElementParameterParser.getValue(node, "__ROUTE_RESOURCE_TYPE_RES_URI__");
		filePath = "\"classpath:" + filePath + "\"";
	}
	filePath.replaceAll("\\\\","/");
	eb.addParam(serviceType, filePath);
} else {
	eb.addParam(serviceType, "__SERVICE_CLASS__");
}

eb.addParam("dataFormat", "\""+dataformat+"\"");
eb.getNodeParamNotDefaultAppender(node).visibleRequired(true)
	.addParam("serviceNameString", "__SERVICE_NAME__")
	.addParam("endpointNameString", "__PORT_NAME__")
	.addListMapParams("__ADVARGUMENTS__");

String operationName = helper.getVisibleStringParam("__OPERATION_NAME__").trim();
if(!operationName.isEmpty() && !operationName.equals("")) {
	StringBuilder stmt = new StringBuilder();
	stmt.append("QName operation = null;\n");
	stmt.append("try { operation = QName.valueOf(")
		.append(operationName)
		.append(");}catch(Exception e){}\n");
	statements = stmt.toString();

	eb.getConditionParamAppender("operation == null")
		.appendParamWhenFalse("defaultOperationNamespace","operation.getNamespaceURI()")
		.appendParamWhenFalse("defaultOperationName","operation.getLocalPart()")
		.finish();
}

if(!conns.isEmpty()){
	eb.addParam("headerFilterStrategy","\"#CXF_PAYLOAD_HEADER_FILTER\"");
	eb.addParam("properties.id","\""+node.getUniqueName()+"\"");
}else if("true".equals(useServiceRegistry) || ("true".equals(useSecurity) && "SAML".equals(ElementParameterParser.getValue(node, "__SECURITY_TYPE__")))) {
	eb.addParam("cxfBinding", "\"#DEFAULT_CXF_BINDING\"");
}
uri = eb.build();
%>
