public class CLASS {

    private static String getValue(INode node, String __ID__) {
        return ElementParameterParser.getValue(node, __ID__);
    }

    private static boolean getBoolValue(INode node, String __ID__) {
        return Boolean.parseBoolean(getValue(node,__ID__));
    }

    private static <T> T getObjectValue(INode node,String __ID__) {
        return (T) ElementParameterParser.getObjectValue(node, __ID__);
    }

    private static void appendParamWhenNotDefaultNorEmpty(StringBuilder sb, String param, String paramV, String defaultV) {
        if (paramV != null && !paramV.trim().equals("") && !defaultV.equals(paramV)) {
            //the first '&' should replace to '?' later.
            sb.append("+\"&").append(param).append("=\"+").append(paramV);
        }
    }

    private static void appendParamWhenNotDefault(StringBuilder sb, String param, boolean paramV, boolean defaultV) {
        if (paramV != defaultV) {
            sb.append("+\"&").append(param).append('=').append(paramV).append('"');
        }
    }

    private static void appendTableParams(StringBuilder sb, java.util.Collection<Map<String, String>> tableValues){
        for (Map<String, String> map : tableValues) {
            String argName = map.get("NAME").trim();
            String argValue = map.get("VALUE").trim();
            sb.append("+\"&\"+").append(argName).append("+\"=\"+").append(argValue);
        }
    }

    private static String getURI(StringBuilder sb) {
        return sb.toString().replaceFirst("&", "?");
    }

    // the generate method.
    public String generate(CodeGeneratorArgument argument) {
        return "";
    }
}