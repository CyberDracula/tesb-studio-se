<%@ jet 
	package="org.talend.designer.codegen.translators" 
	imports="
		org.talend.core.model.process.IProcess
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.Vector
		java.util.List
		java.util.ArrayList
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.utils.JavaResourcesHelper
		java.util.Map
		org.talend.core.model.process.ElementParameterParser
	"
	class="Footer" 
	skeleton="footer_java.skeleton"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);

	List<? extends INode> processNodes = (List<? extends INode>) process.getGeneratingNodes();
	List<IContextParameter> params = process.getContextManager().getDefaultContext().getContextParameterList();
    String jobFolderName = JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());

	final boolean stats = codeGenArgument.isStatistics();
%>
	}

	private org.apache.camel.main.Main main;

    private void run() throws java.lang.Exception {
        main = new org.apache.camel.main.Main() {

            protected CamelContext createContext() {
                final org.apache.camel.impl.DefaultCamelContext camelContext =
                    new org.apache.camel.spring.SpringCamelContext(
                        new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/spring/<%=process.getName().toLowerCase()%>.xml"));
                camelContext.setName("<%=process.getName()%>-ctx");
                // add notifier
                java.util.Collection<org.apache.camel.management.JmxNotificationEventNotifier> jmxEventNotifiers = camelContext
                        .getRegistry().findByType(
                                org.apache.camel.management.JmxNotificationEventNotifier.class);
                if (jmxEventNotifiers != null && !jmxEventNotifiers.isEmpty()) {
                    camelContext.getManagementStrategy().addEventNotifier(
                            jmxEventNotifiers.iterator().next());
                }
<%
    if (stats) {
%>
                // add statistics which shows on the connection
                final routines.system.RunStat runStat = new routines.system.RunStat();
                runStat.openSocket(true);
                runStat.setAllPID(pid, pid, pid, "<%=codeGenArgument.getJobName() %>");
                try {
                    runStat.startThreadStat(clientHost, portStats);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                runStat.updateStatOnJob(routines.system.RunStat.JOBSTART, null);

                final Map<String, String> targetNodeToConnectionMap = new HashMap<String, String>();
<%
                for (INode node : processNodes) {
                    if (node.isActivate()) {
                        for (org.talend.core.model.process.IConnection conn : node.getIncomingConnections()) {
%>
                targetNodeToConnectionMap.put("<%=node.getUniqueName()%>", "<%=conn.getUniqueName()%>");
<%
                        }
                    }
                }
%>
                for (String connection : targetNodeToConnectionMap.values()) {
                    runStat.updateStatOnConnection(connection, routines.system.RunStat.BEGIN, 0);
                }
                camelContext.addInterceptStrategy(new org.apache.camel.spi.InterceptStrategy() {
                    public org.apache.camel.Processor wrapProcessorInInterceptors(CamelContext context, final org.apache.camel.model.ProcessorDefinition<?> node,
                        final org.apache.camel.Processor target, org.apache.camel.Processor nextTarget) throws Exception {
                        return new org.apache.camel.processor.DelegateAsyncProcessor(target) {
                            public boolean process(org.apache.camel.Exchange exchange, org.apache.camel.AsyncCallback callback) {
                                final String connection = targetNodeToConnectionMap.get(node.getId());
                                if (null != connection) {
                                    runStat.updateStatOnConnection(targetNodeToConnectionMap.get(node.getId()), routines.system.RunStat.RUNNING, 1);
                                }
                                return super.process(exchange, callback);
                            }
                        };
                    }
                });
<%
} //if stats
%>
                return camelContext;
            }
        };

        //add route
        main.addRouteBuilder(this);
    
        main.run();
    }

	public void stop() throws java.lang.Exception {
		if(main != null) {
			main.stop();
		}
	}

	public void shutdown() throws java.lang.Exception {
		if(main != null) {
			main.shutdown();
		}
	}

	public static class ContextProperties extends Properties {

		public void synchronizeContext() {
		<% for (IContextParameter ctxParam : params){
			String cParaName = ctxParam.getName(); %>
			if(<%=cParaName %> != null){
			<% if(ctxParam.getType().equals("id_Date")){ %>
				String pattern_<%=cParaName %> = "yyyy-MM-dd HH:mm:ss";
				String value_<%=cParaName %> = "<%=ctxParam.getValue() %>";
				String[] parts_<%=cParaName %> = value_<%=cParaName %>.split(";");
				if (parts_<%=cParaName %>.length > 1) {
					pattern_<%=cParaName %> = parts_<%=cParaName %>[0];
					this.setProperty("<%=cParaName %>", pattern_<%=cParaName %> + ";" + FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
				} else {
					this.setProperty("<%=cParaName %>", FormatterUtils.format_Date(<%=cParaName %>, pattern_<%=cParaName %>));
				}
			<% } else { %>
				this.setProperty("<%=cParaName %>", <%=cParaName %>.toString());
			<% } %>
			}
		<% } %>
		}

<%
for (IContextParameter ctxParam : params) {
	if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")) { %>
		public String <%=ctxParam.getName()%>;
		public String get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>() {
			return this.<%=ctxParam.getName()%>;
		}
<%	} else { %>
		public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> <%=ctxParam.getName()%>;
		public <%=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true)%> get<%=Character.toUpperCase(ctxParam.getName().charAt(0)) + ctxParam.getName().substring(1)%>() {
			return this.<%=ctxParam.getName()%>;
		}
<%	}
}
%>
	}

	private String contextStr = "Default";
	private final ContextProperties context = new ContextProperties();

<%
    if(stats) {
%>
	private int portStats = -1;
	private String clientHost = "localhost";
	private String pid;
<%
    }
%>

	private final Properties context_param = new Properties();

    public static void main(String[] args){
        int exitCode = new <%=process.getName() %>().runJobInTOS(args);
        if(exitCode != 0) {
            System.exit(exitCode);
        }
    }

    @Override
    public String[][] runJob(String[] args) {
		int exitCode = runJobInTOS(args);
		return new String[][] { { Integer.toString(exitCode) } };
    }

    @Override
    public int runJobInTOS(String[] args) {
		String lastStr = "";
        for (String arg : args) {
        	if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

<%
    if (stats) {
%>
    	if(pid == null) {
	    	pid = TalendString.getAsciiRandomString(6);
	    }
<%
    }
%>

		//read context values
		readContextValues(contextStr);

		try {
			run();
		} catch (java.lang.Exception e) {
			System.err.println(e.getMessage());
			e.printStackTrace();
			return 1;
		}
		return 0;
	}

	/**
	* read context values from specified context
	* @parameter contextName : the name of context while will be used
	*/
	private void readContextValues(String contextName){
		try {
			java.io.InputStream inContext = <%=process.getName()%>.class.getClassLoader().getResourceAsStream("<%=codeGenArgument.getCurrentProjectName().toLowerCase() %>/<%=jobFolderName %>/contexts/"+contextName+".properties");

			if (inContext!=null) {
	    		context.load(inContext);
    			inContext.close();
	    	}else{
	    		//print info and job continue to run, for case: context_param is not empty.
	    		System.err.println("Could not find the context " + contextName);
			}

			if(!context_param.isEmpty()) {
			    context.putAll(context_param);
			}
<% 
			//for bug TDI-22398
			for (IContextParameter ctxParam :params){ //start for

            	if (ctxParam.getType().equals("id_Password")) {
            %>
            		String pwd_<%=ctxParam.getName()%>_value = context.getProperty("<%=ctxParam.getName()%>");
            		context.<%=ctxParam.getName()%> = null;
            		if(pwd_<%=ctxParam.getName()%>_value!=null) {
            			if(context_param.containsKey("<%=ctxParam.getName()%>")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.<%=ctxParam.getName()%> = pwd_<%=ctxParam.getName()%>_value;
            			} else if (!pwd_<%=ctxParam.getName()%>_value.isEmpty()) {
            				try {
            					context.<%=ctxParam.getName()%> = routines.system.PasswordEncryptUtil.decryptPassword(pwd_<%=ctxParam.getName()%>_value);
            					context.put("<%=ctxParam.getName()%>",context.<%=ctxParam.getName()%>);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
            <%
            		continue;
            	}						
			
			    String typeToGenerate ="String";
			    if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value")))
			    {
			       typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
			    }
			    if(typeToGenerate.equals("java.util.Date")){ // start if
			        
%>
			try{
				String context_<%=ctxParam.getName()%>_value = context.getProperty("<%=ctxParam.getName()%>");
				if (context_<%=ctxParam.getName()%>_value == null){
					context_<%=ctxParam.getName()%>_value = "";
				}
				int context_<%=ctxParam.getName()%>_pos = context_<%=ctxParam.getName()%>_value.indexOf(";");
				String context_<%=ctxParam.getName()%>_pattern =  "yyyy-MM-dd HH:mm:ss";
				if(context_<%=ctxParam.getName()%>_pos > -1){
					context_<%=ctxParam.getName()%>_pattern = context_<%=ctxParam.getName()%>_value.substring(0, context_<%=ctxParam.getName()%>_pos);
					context_<%=ctxParam.getName()%>_value = context_<%=ctxParam.getName()%>_value.substring(context_<%=ctxParam.getName()%>_pos + 1);
				}
				
			    context.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat(context_<%=ctxParam.getName()%>_pattern).parse(context_<%=ctxParam.getName()%>_value));
			   
			}catch(java.text.ParseException e)
			{
			    context.<%=ctxParam.getName()%>=null;
			}
<%
		    	}else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String")||typeToGenerate.equals("java.lang.String") ){
%>
			    	context.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) context.getProperty("<%=ctxParam.getName()%>");
<%
				}else if(typeToGenerate.equals("Character")&&ctxParam.getName()!=null){
%>
			 	context.<%=ctxParam.getName()%>= new java.text.StringCharacterIterator(context.getProperty("<%=ctxParam.getName()%>")).first();			 
<%
            	}else{
%> 
			 		try{
			     		context.<%=ctxParam.getName()%>=routines.system.ParserUtils.parseTo_<%=typeToGenerate%> (context.getProperty("<%=ctxParam.getName()%>"));
			 		}catch(NumberFormatException e){
			     		context.<%=ctxParam.getName()%>=null;
			 		}
<%
			    } //end if
			} //end for
%>
    	} catch (java.io.IOException ie) {
    		System.err.println("Could not load context "+contextName);
    		ie.printStackTrace();
    	}
	}

	private void evalParam(String arg) {
        if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
        }else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
            }
        }
<%
    if (stats) {
%>
        else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
    	} else if (arg.startsWith("--client_host=")) {
    		clientHost = arg.substring(14);
    	} else if (arg.startsWith("--pid=")) {
    		pid = arg.substring(6);
    	}
<%
    }
%>
	}
}
